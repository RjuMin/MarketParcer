import sqlite3
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# Константы для состояний разговора
LINK, NAME = range(2)


# Подключение к базе данных SQLite
def init_db():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            product_name TEXT NOT NULL,
            product_link TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()


# Функция для добавления продукта в БД
def add_product_to_db(user_id, product_name, product_link):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute(
        '''
        INSERT INTO products (user_id, product_name, product_link)
        VALUES (?, ?, ?)
    ''', (user_id, product_name, product_link))
    conn.commit()
    conn.close()


# Обработчик команды /start
def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        'Привет! Я бот для сохранения информации о товарах.\n'
        'Пожалуйста, отправьте мне ссылку на товар.')
    return LINK


# Обработчик получения ссылки
def get_link(update: Update, context: CallbackContext) -> int:
    context.user_data['link'] = update.message.text
    update.message.reply_text('Теперь отправьте название товара.')
    return NAME


# Обработчик получения названия и сохранения в БД
def get_name(update: Update, context: CallbackContext) -> int:
    product_name = update.message.text
    product_link = context.user_data['link']
    user_id = update.message.from_user.id

    # Сохраняем в базу данных
    add_product_to_db(user_id, product_name, product_link)

    update.message.reply_text(
        f'Спасибо! Товар "{product_name}" сохранен в базу данных.\n'
        f'Ссылка: {product_link}\n'
        f'Ваш ID: {user_id}')

    return ConversationHandler.END


# Обработчик команды /cancel
def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text('Операция отменена.')
    return ConversationHandler.END


def main():
    # Инициализация базы данных
    init_db()

    # Создаем Updater и передаем ему токен вашего бота
    updater = Updater("7560180134:AAGJS1JQblTxK4QS1UHGQmU9tjpxCgRa9aI",
                      use_context=True)

    # Получаем диспетчер для регистрации обработчиков
    dp = updater.dispatcher

    # Создаем обработчик разговоров
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LINK: [MessageHandler(Filters.text & ~Filters.command, get_link)],
            NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # Добавляем обработчик разговоров в диспетчер
    dp.add_handler(conv_handler)

    # Запускаем бота
    updater.start_polling()

    # Останавливаем бота при нажатии Ctrl+C
    updater.idle()


if __name__ == '__main__':
    main()
